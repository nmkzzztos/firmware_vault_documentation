"use strict";(self.webpackChunkfirmware_vault_docs=self.webpackChunkfirmware_vault_docs||[]).push([[1634],{8463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Backend/implemented-modules","title":"The Implemented Modules","description":"cve-bin-tool.py","source":"@site/docs/Backend/implemented-modules.md","sourceDirName":"Backend","slug":"/Backend/implemented-modules","permalink":"/firmware_vault_documentation/docs/Backend/implemented-modules","draft":false,"unlisted":false,"editUrl":"https://github.com/nmkzzztos/firmware_vault_documentation/tree/main/docs/Backend/implemented-modules.md","tags":[],"version":"current","frontMatter":{"id":"implemented-modules","title":"The Implemented Modules"},"sidebar":"gettingStartedSidebar","previous":{"title":"Write Your Own Wrapper","permalink":"/firmware_vault_documentation/docs/Backend/wrapper-documentation"},"next":{"title":"Firmwalker","permalink":"/firmware_vault_documentation/docs/Backend/firmwalker"}}');var a=n(4848),r=n(8453);const o={id:"implemented-modules",title:"The Implemented Modules"},s=void 0,l={},d=[{value:"cve-bin-tool.py",id:"cve-bin-toolpy",level:2},{value:"binwalk",id:"binwalk",level:2},{value:"Firmwalker",id:"firmwalker",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"cve-bin-toolpy",children:"cve-bin-tool.py"}),"\n",(0,a.jsxs)(t.p,{children:["The cve-bin-tool.py is an example implementation of a wrapper for an analysis\ntool. In this case Intel's ",(0,a.jsx)(t.a,{href:"https://github.com/intel/cve-bin-tool",children:"cve-bin-tool"}),"\nwas used. The analysis binary gets called with the path to analyze and the\noutput gets written to a ",(0,a.jsx)(t.code,{children:"json"})," file. Before the data of the output file\ngets inserted, it is checked whether the data already exists in the database\nor not, so the results are not inserted twice."]}),"\n",(0,a.jsx)(t.h2,{id:"binwalk",children:"binwalk"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"binwalk3.py"})," automates the process of running Binwalk on a given firmware\nimage, extracting relevant information, and storing the results in a\ndatabase.\nIt runs with the ",(0,a.jsx)(t.code,{children:"-Me"})," flags, which are required for deeper analysis"]}),"\n",(0,a.jsx)(t.h2,{id:"firmwalker",children:"Firmwalker"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"firmwalker_service.py"})," is a wrapper around the ",(0,a.jsx)(t.a,{href:"https://github.com/craigz28/firmwalker",children:"firmwalker.sh"})," open-source bash script.\nMore about Firmwalker in the dedicated Documentation page."]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(6540);const a={},r=i.createContext(a);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);