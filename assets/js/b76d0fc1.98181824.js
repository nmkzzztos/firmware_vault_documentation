"use strict";(self.webpackChunkfirmware_vault_docs=self.webpackChunkfirmware_vault_docs||[]).push([[8366],{2049:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Frontend/Services/dynamicsqlquerybuilder","title":"Dynamic SQL Query Builder","description":"Overview","source":"@site/docs/Frontend/Services/dynamicsqlquerybuilder.md","sourceDirName":"Frontend/Services","slug":"/Frontend/Services/dynamicsqlquerybuilder","permalink":"/firmware_vault_documentation/docs/Frontend/Services/dynamicsqlquerybuilder","draft":false,"unlisted":false,"editUrl":"https://github.com/nmkzzztos/firmware_vault_documentation/tree/main/docs/Frontend/Services/dynamicsqlquerybuilder.md","tags":[],"version":"current","frontMatter":{"id":"dynamicsqlquerybuilder","title":"Dynamic SQL Query Builder"},"sidebar":"gettingStartedSidebar","previous":{"title":"Data Explorer","permalink":"/firmware_vault_documentation/docs/Frontend/data-explorer"},"next":{"title":"AG-Grid","permalink":"/firmware_vault_documentation/docs/Frontend/Integrations/aggrid"}}');var r=s(4848),t=s(8453);const l={id:"dynamicsqlquerybuilder",title:"Dynamic SQL Query Builder"},d="Dynamic SQL Query Builder",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:2},{value:"Table Relationships",id:"table-relationships",level:2},{value:"Supported Tables and Relations",id:"supported-tables-and-relations",level:3},{value:"Table Interaction Matrix",id:"table-interaction-matrix",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>generateQuery()</code>",id:"generatequery",level:3},{value:"Example:",id:"example",level:4},{value:"Utility Methods:",id:"utility-methods",level:3}];function o(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dynamic-sql-query-builder",children:"Dynamic SQL Query Builder"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Dynamic Sql Query Builder"})," is an Angular service designed to dynamically generate SQL queries based on specified tables, columns, filtering conditions, sorting, and limits. It ensures that valid table relationships are maintained using predefined mapping rules."]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dynamically constructs SQL ",(0,r.jsx)(n.code,{children:"SELECT"})," queries with optional ",(0,r.jsx)(n.code,{children:"WHERE"}),", ",(0,r.jsx)(n.code,{children:"ORDER BY"}),", and ",(0,r.jsx)(n.code,{children:"LIMIT"})," clauses."]}),"\n",(0,r.jsxs)(n.li,{children:["Supports ",(0,r.jsx)(n.code,{children:"INNER JOIN"})," operations based on predefined table relationships."]}),"\n",(0,r.jsx)(n.li,{children:"Validates table names and relationships before query execution."}),"\n",(0,r.jsx)(n.li,{children:"Provides utility methods for table validation and relationship retrieval."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"table-relationships",children:"Table Relationships"}),"\n",(0,r.jsxs)(n.p,{children:["The service maintains a predefined set of table relationships that dictate how joins are constructed. The relationships are stored in a constant object (",(0,r.jsx)(n.code,{children:"TABLE_RELATIONS"}),"), ensuring that joins are only created when a valid mapping exists between two tables."]}),"\n",(0,r.jsx)(n.h3,{id:"supported-tables-and-relations",children:"Supported Tables and Relations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"products"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"cve_results"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"binwalk_results"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"jobs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"tasks"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"table-interaction-matrix",children:"Table Interaction Matrix"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Table"}),(0,r.jsx)(n.th,{children:"Interacts With"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"products"}),(0,r.jsx)(n.td,{children:"cve_results, binwalk_results, tasks"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"cve_results"}),(0,r.jsx)(n.td,{children:"products, binwalk_results, tasks"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"binwalk_results"}),(0,r.jsx)(n.td,{children:"products, cve_results, tasks"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"jobs"}),(0,r.jsx)(n.td,{children:"tasks"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"tasks"}),(0,r.jsx)(n.td,{children:"jobs, products, cve_results, binwalk_results"})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Tables that are not listed as interacting do not have direct relationships."})}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"generatequery",children:(0,r.jsx)(n.code,{children:"generateQuery()"})}),"\n",(0,r.jsx)(n.p,{children:"Generates an SQL query string based on user-specified tables, columns, and optional filtering and sorting parameters."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tables: string[]"})," - List of table names to include in the query."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"columns: string[]"})," - Columns to select (default: ",(0,r.jsx)(n.code,{children:"['*']"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"where: string[]"})," - Optional filtering conditions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"orderBy: string | null"})," - Column to sort results by."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"orderDirection: 'ASC' | 'DESC'"})," - Sorting direction (default: ",(0,r.jsx)(n.code,{children:"ASC"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit: number | null"})," - Limit on the number of rows (optional)."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"string"})," - The generated SQL query."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const query = service.generateQuery(\n  ['products', 'cve_results'],\n  ['products.id', 'products.product_name', 'cve_results.cve_number'],\n  ['cve_results.severity = \"High\"'],\n  'cve_results.cve_number',\n  'DESC',\n  5\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Generated SQL:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT products.id, products.product_name, cve_results.cve_number\nFROM products\nINNER JOIN cve_results ON products.id = cve_results.image_id\nWHERE cve_results.severity = "High"\nORDER BY cve_results.cve_number DESC\nLIMIT 5;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"utility-methods",children:"Utility Methods:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"generateJoins()"}),": Creates ",(0,r.jsx)(n.code,{children:"INNER JOIN"})," statements based on the predefined table relationships."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns: ",(0,r.jsx)(n.code,{children:"string"})," - The ",(0,r.jsx)(n.code,{children:"JOIN"})," SQL expressions."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"validateTables()"}),": Checks if the provided tables exist in the ",(0,r.jsx)(n.code,{children:"TABLE_RELATIONS"})," map."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns: ",(0,r.jsx)(n.code,{children:"string[]"})," - List of errors if any tables are invalid, otherwise an empty array."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"getRelationship()"}),": Retrieves the relationship condition between two tables if one exists."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Returns: ",(0,r.jsx)(n.code,{children:"string | null"})," - The join condition or ",(0,r.jsx)(n.code,{children:"null"})," if no relation exists."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);